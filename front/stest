@RestController
public class Hangers {
    @GetMapping("/Hangers/{suffix}/{startNumber}/{endNumber}")
    public ResponseEntity<byte[]> generateStickersPDF(
            @PathVariable int startNumber,
            @PathVariable int endNumber,
            @PathVariable String suffix) {
        try {
            // Create PDF in memory
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            PdfWriter writer = new PdfWriter(byteArrayOutputStream);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);
           float topMargin = 1.2f * 27.35f;     // ~42.5 pt
          //  float bottomMargin = 0.53f * 28.35f;   // ~15 pt
         //   float leftMargin = 0.2f * 28.35f;      // ~5.7 pt
         //   float rightMargin = 0.5f * 28.35f;     // ~14.2 pt
            document.setMargins(topMargin,12,10,19);
            int columns = 5; // Five stickers per row
            int rows = 13; // 13 rows per page (Total 65 stickers per page)
            int totalTickets = columns * rows;
            // Create table
            Table table = new Table(UnitValue.createPercentArray(columns))
                    .useAllAvailableWidth()  // Ensure it fits A4 width
                    .setHorizontalAlignment(HorizontalAlignment.CENTER);
            int currentNumber = startNumber;
            for (int i = 0; i < totalTickets && currentNumber <= endNumber; i++) {
                String ticketCode = suffix + String.format("%03d", currentNumber) ; // Add suffix at the start
                currentNumber++;
                // Create text below barcode
                Paragraph text = new Paragraph(ticketCode)
                        .setBold()
                        .setTextAlignment(TextAlignment.CENTER)
                        .setVerticalAlignment(VerticalAlignment.MIDDLE)
                        .setFontSize(26)
                        .setMarginRight(18)
                        .setMarginTop(-10);
                // Generate barcode image
                float barcodeWidth = 125; // 8 cm (80mm)
                float barcodeHeight = 16;
                Image barcodeImage = generateBarcode(ticketCode);
                barcodeImage.setWidth(barcodeWidth);
                barcodeImage.setHeight(barcodeHeight);
                barcodeImage.setTextAlignment(TextAlignment.CENTER);
                barcodeImage.setMarginRight(6) ;
                barcodeImage.setMarginLeft(-10);
                // Adjust barcode size
                // Create cell with barcode and text
                Cell cell = new Cell()
                        .setPadding(6)
                        .setMarginLeft(4)
                        .setPaddingBottom(10)
                        .setPaddingRight(-1)
                        .setPaddingLeft(-4)
                        .add(barcodeImage)
                        .add(text)
                        .setTextAlignment(TextAlignment.CENTER)
                        .setBorder(Border.NO_BORDER);
                // Add the cell to the table
                table.addCell(cell);
            }
            // Add table to document
            document.add(table);
            document.close();
            // Convert PDF to byte array and return as HTTP response
            byte[] pdfBytes = byteArrayOutputStream.toByteArray();
            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_PDF)
                    .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=stickers.pdf")
                    .body(pdfBytes);

        } catch (Exception e) {
            return ResponseEntity.internalServerError().body(null);
        }
    }
    private static Image generateBarcode(String text) throws Exception {
        BitMatrix bitMatrix = new MultiFormatWriter().encode(text, BarcodeFormat.CODE_128, 150, 50);
        Path tempImagePath = java.nio.file.Files.createTempFile("barcode", ".png");
        MatrixToImageWriter.writeToPath(bitMatrix, "PNG", tempImagePath);
        ImageData imageData = ImageDataFactory.create(tempImagePath.toUri().toURL());
        return new Image(imageData);
    }
}










/////////////////////////////////////////////////////////////////////////////////////////////////// 


@RestController
public class Container {

    @GetMapping("/container/{prefix}/{suffix}")
    public ResponseEntity<byte[]> generateBarcodePDF(
            @PathVariable String prefix,
            @PathVariable String suffix) {
        try {
            // Create PDF in memory
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            PdfWriter writer = new PdfWriter(byteArrayOutputStream);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);
            float topMargin = 1.2f * 27.35f;     // ~42.5
            document.setMargins(topMargin,12,10,19);

            int columns = 5; // 5 columns per row
            int rows = 13; // 13 rows per page (Total 35 barcodes per page)
            Table table = new Table(columns).useAllAvailableWidth().setHorizontalAlignment(HorizontalAlignment.CENTER);

            // Generate barcode values (AA00, AB00, AC00, etc.)
            char firstLetter = Character.toUpperCase(prefix.charAt(0));
            char secondLetter = 'A';  // Start from 'A'

            for (int i = 0; i < columns * rows; i++) {
                var  barcodeValue = "" + firstLetter + secondLetter + suffix.toUpperCase();

                // Move to next letter (A → B → C ...)
                if ((i + 1) % 5 == 0) {
                    if (secondLetter < 'Z') {
                        secondLetter++;
                    } else {
                        secondLetter = 'A';
                        firstLetter++;
                }
                }

                // Create text below barcode
                Paragraph text = new Paragraph(barcodeValue)
                        .setBold()
                        .setTextAlignment(TextAlignment.CENTER)
                        .setMarginTop(-6)
                        .setMarginRight(5)
                        .setFontSize(26);
                // Generate barcode image
                float barcodeWidth = 122        ;
                float barcodeHeight = 16;

                Image barcodeImage = generateBarcode(barcodeValue);
                barcodeImage.setWidth(barcodeWidth);
                barcodeImage.setHeight(barcodeHeight);
                barcodeImage.setTextAlignment(TextAlignment.CENTER);
                barcodeImage.setMarginLeft(-6);



                // Create cell with barcode and text
                Cell cell = new Cell()
                        .setPaddingBottom(10)
                        .setPaddingRight(-2)
                        .setPaddingLeft(-4)
                        .add(barcodeImage)
                        .add(text)
                        .setTextAlignment(TextAlignment.CENTER)
                        .setBorder(Border.NO_BORDER);

                table.addCell(cell);
            }

            // Add table to document
            document.add(table);
            document.close();

            // Convert PDF to byte array and return as HTTP response
            byte[] pdfBytes = byteArrayOutputStream.toByteArray();
            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_PDF)
                    .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=barcode_grid.pdf")
                    .body(pdfBytes);

        } catch (Exception e) {
            return ResponseEntity.internalServerError().body(("Error generating PDF: " + e.getMessage()).getBytes());
        }
    }
    private static Image generateBarcode(String text) throws Exception {
        BitMatrix bitMatrix = new MultiFormatWriter().encode(text, BarcodeFormat.CODE_128, 150, 50);
        Path tempImagePath = java.nio.file.Files.createTempFile("barcode", ".png");
        MatrixToImageWriter.writeToPath(bitMatrix, "PNG", tempImagePath);
        ImageData imageData = ImageDataFactory.create(tempImagePath.toUri().toURL());
        return new Image(imageData);
    }
}  


///////////////////////////////////////////////////////////////////////////////// 








package org.example.print.All;

import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.properties.HorizontalAlignment;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.VerticalAlignment;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;

import java.io.ByteArrayOutputStream;
import java.io.File;

@RestController
public class Arrows {

    private static final String DOWN_ARROW_PATH = "C:\\Users\\TN-100\\Downloads\\down-arrow.png";  // Update with actual path
    private static final String SIDE_ARROW_PATH = "C:\\Users\\TN-100\\Downloads\\next.png";  // Update with actual path

    @GetMapping("/arrows/down")
    public ResponseEntity<byte[]> generateArrowDownPDF() {
        return generateArrowPDF(DOWN_ARROW_PATH, "arrow_down.pdf");
    }

    @GetMapping("arrows/side")
    public ResponseEntity<byte[]> generateArrowSidePDF() {
        return generateArrowPDF(SIDE_ARROW_PATH, "arrow_side.pdf");
    }

    private ResponseEntity<byte[]> generateArrowPDF(String imagePath, String fileName) {
        try {
            // Create PDF in memory
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            PdfWriter writer = new PdfWriter(byteArrayOutputStream);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);

            int columns = 5; // 5 columns per row
            int rows = 13; // 7 rows per page
            Table table = new Table(columns).useAllAvailableWidth();

            // Check if the image file exists
            File file = new File(imagePath);
            if (!file.exists()) {
                return ResponseEntity.badRequest().body(("Image not found: " + imagePath).getBytes());
            }

            ImageData imageData = ImageDataFactory.create(imagePath);

            for (int i = 0; i < columns * rows; i++) {
                Image arrowImage = new Image(imageData);
                arrowImage.scaleToFit(51, 51);  // Adjust size as needed

                Cell cell = new Cell()
                        .add(arrowImage)
                        .setTextAlignment(TextAlignment.CENTER)
                        .setVerticalAlignment(VerticalAlignment.MIDDLE)
                        .setPaddingLeft(25)
                        .setHorizontalAlignment(HorizontalAlignment.CENTER);

                table.addCell(cell);
            }

            document.add(table);
            document.close();

            // Convert PDF to byte array and return as HTTP response
            byte[] pdfBytes = byteArrayOutputStream.toByteArray();
            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_PDF)
                    .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=" + fileName)
                    .body(pdfBytes);

        } catch (Exception e) {
            return ResponseEntity.internalServerError().body(("Error generating PDF: " + e.getMessage()).getBytes());
        }
    }
}
   ///////////////////////////////////////////////////////////////////////// 


package org.example.print.All;
import com.google.zxing.*;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.borders.Border;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.properties.HorizontalAlignment;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.UnitValue;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.properties.VerticalAlignment;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import java.io.ByteArrayOutputStream;
import java.nio.file.Files;
import java.nio.file.Path;

@RestController
public class ItemCodes {
    @GetMapping("/Item/barcode/{startNumber}")
    public ResponseEntity<byte[]> generateStickersPDF(@PathVariable int startNumber) {
        try {
            // Create PDF in memory with A4 size
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            PdfWriter writer = new PdfWriter(byteArrayOutputStream);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf, pdf.getDefaultPageSize());
            // Set margins: top = 1.2 cm, right = 0.3 cm, bottom = 30pt (default), left = 0.9 cm
            float topMargin = 1f * 28.35f;   // ~34.02 points
            float leftMargin = 0.9f * 28.35f;   // ~25.5 points
            float rightMargin = 0.3f * 28.35f;  // ~8.5 points

            document.setMargins(topMargin, rightMargin, 3, leftMargin);


            int columns = 5; // 5 stickers per row
            int rows = 13; // 13 rows per page (Total 65 stickers per page)

            Table table = new Table(columns).useAllAvailableWidth()
                    .setHorizontalAlignment(HorizontalAlignment.CENTER)
                    .setWidth(UnitValue.createPercentValue(100)); // Use full width of A4

            for (int i = 0; i < rows * columns; i++) {
                int ticketNumber = startNumber + i;
                String ticketCode = String.format("%06d", ticketNumber); // Format as six-digit code
                float barcodeWidth = 96;
                float barcodeHeight = 16;
                Image barcodeImage = generateBarcode(ticketCode);
                barcodeImage.setWidth(barcodeWidth);
                barcodeImage.setHeight(barcodeHeight);
                barcodeImage.setTextAlignment(TextAlignment.CENTER);
               // barcodeImage.getPaddingLeft();
                barcodeImage.setMarginLeft(5);
                // Create text below barcode

                Paragraph text = new Paragraph(ticketCode)
                        .setBold()
                        .setTextAlignment(TextAlignment.CENTER)
                        .setVerticalAlignment(VerticalAlignment.MIDDLE)
                        .setFontSize(25)
                        .setMarginRight(5)
                        .setMarginLeft(-8)
                        .setMarginTop(-6);


                // Create a cell with barcode and text
                Cell cell = new Cell()
                        .setMarginTop(25)
                        .setPaddingBottom(9)
                        .setPaddingRight(-4)
                        .setPaddingTop(5)
                        .setMarginLeft(55)
                        .add(barcodeImage)
                        .add(text)
                        .setTextAlignment(TextAlignment.CENTER)
                        .setBorder(Border.NO_BORDER);
                // Add the cell to the table
                table.addCell(cell);
            }

            // Add table to the document
            document.add(table);
            document.close();

            // Convert PDF to byte array and return as HTTP response
            byte[] pdfBytes = byteArrayOutputStream.toByteArray();
            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_PDF)
                    .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=stickers.pdf")
                    .body(pdfBytes);

        } catch (Exception e) {
            return ResponseEntity.internalServerError().body(("Error generating PDF: " + e.getMessage()).getBytes());
        }
    }

    private static Image generateBarcode(String text) throws Exception {
        BitMatrix bitMatrix = new MultiFormatWriter().encode(text, BarcodeFormat.CODE_128, 800, 100);
        Path tempImagePath = Files.createTempFile("barcode", ".png");
        MatrixToImageWriter.writeToPath(bitMatrix, "PNG", tempImagePath);
        ImageData imageData = ImageDataFactory.create(tempImagePath.toUri().toURL());
        return new Image(imageData);
    }
} 

/////////////////////////////////////////////////////////////////// 


package org.example.print.All;

import com.google.zxing.*;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.borders.Border;
import com.itextpdf.layout.element.AreaBreak;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.HorizontalAlignment;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.UnitValue;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.ByteArrayOutputStream;
import java.nio.file.Path;
import java.util.List;

@RestController
@RequestMapping("/PersonaliserA4")
public class PersonaliserA4Controller {

    /**
     * Endpoint to generate a Personaliser PDF in A4 layout.
     * Expects multiple code and times pairs as query parameters.
     * Example:
     *   GET /PersonaliserA4/print?code=ABC&times=2&code=XYZ&times=3
     */
    @GetMapping("/print")
    public ResponseEntity<byte[]> generatePersonaliserA4PDF(
            @RequestParam("code") List<String> codes,
            @RequestParam("times") List<Integer> times) {
        try {
            byte[] pdfBytes = createPdfForCodes(codes, times);
            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_PDF)
                    .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=personaliserA4.pdf")
                    .body(pdfBytes);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.internalServerError().body(null);
        }
    }

    /**
     * Creates a PDF with a grid layout of 5 columns and 13 rows (65 cells per page).
     * Each cell shows the barcode and text for a given code.
     */
    private byte[] createPdfForCodes(List<String> codes, List<Integer> times) throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PdfWriter writer = new PdfWriter(baos);
        PdfDocument pdfDoc = new PdfDocument(writer);
        Document document = new Document(pdfDoc);

        // Set margins for an A4 page (adjust as needed)
        document.setMargins(10, 12, 10, 19); // top, right, bottom, left

        // Define the grid layout: 5 columns and 13 rows (65 cells per page)
        int columns = 5;
        int rows = 13;
        int totalSlots = columns * rows;

        Table table = new Table(UnitValue.createPercentArray(columns))
                .useAllAvailableWidth()
                .setHorizontalAlignment(HorizontalAlignment.CENTER);

        int cellCount = 0;

        // Loop over each code/time pair and repeat the code the specified number of times
        for (int i = 0; i < codes.size(); i++) {
            String codeVal = codes.get(i);
            int repeatCount = times.get(i);

            for (int r = 0; r < repeatCount; r++) {
                // When the current page is full, add the table and start a new page
                if (cellCount >= totalSlots) {
                    document.add(table);
                    document.add(new AreaBreak());
                    table = new Table(UnitValue.createPercentArray(columns))
                            .useAllAvailableWidth()
                            .setHorizontalAlignment(HorizontalAlignment.CENTER);
                    cellCount = 0;
                }

                // Generate barcode image for the code
                Image barcodeImage = generateBarcode(codeVal);
                barcodeImage.setWidth(125)  ;
                barcodeImage.setHeight(16) ;
                barcodeImage.setTextAlignment(TextAlignment.CENTER);
                barcodeImage.setMarginRight(6) ;
                barcodeImage.setMarginLeft(-8) ;
                // Create a paragraph for the code text
                Paragraph codeText = new Paragraph(codeVal)
                        .setBold()
                        .setFontSize(26)
                        .setMarginTop(-7)
                        .setMarginLeft(-18)
                        .setTextAlignment(TextAlignment.CENTER);

                // Create a cell that holds both the barcode image and the text
                Cell cell = new Cell()
                        .setBorder(Border.NO_BORDER)
                        .setPadding(-2)
                        .setPaddingTop(17)
                        .add(barcodeImage)
                        .add(codeText)
                        .setTextAlignment(TextAlignment.CENTER);

                table.addCell(cell);
                cellCount++;
            }
        }

        // Optionally, fill any remaining cells to complete the grid
        while (cellCount < totalSlots) {
            table.addCell(new Cell().setBorder(Border.NO_BORDER));
            cellCount++;
        }

        document.add(table);
        document.close();
        return baos.toByteArray();
    }

    /**
     * Helper method to generate a CODE_128 barcode from text.
     */
    private static Image generateBarcode(String text) throws Exception {
        BitMatrix bitMatrix = new MultiFormatWriter().encode(text, BarcodeFormat.CODE_128, 150, 50);
        Path tempFile = java.nio.file.Files.createTempFile("barcode", ".png");
        MatrixToImageWriter.writeToPath(bitMatrix, "PNG", tempFile);
        ImageData imageData = ImageDataFactory.create(tempFile.toUri().toURL());
        return new Image(imageData);
    }
}
   
   //////////////////////////////////////////////////////////// 



   package org.example.print.All;
import com.google.zxing.*;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.borders.Border;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.properties.HorizontalAlignment;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.properties.UnitValue;
import com.itextpdf.layout.properties.VerticalAlignment;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import java.io.ByteArrayOutputStream;
import java.nio.file.Path;
@RestController
public class Shelves {
    @GetMapping("/Shelves/{startNumber}/{endNumber}/{suffix}")
    public ResponseEntity<byte[]> generateStickersPDF(
            @PathVariable int startNumber,
            @PathVariable int endNumber,
            @PathVariable String suffix) {
        try {
            // Create PDF in memory
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            PdfWriter writer = new PdfWriter(byteArrayOutputStream);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);
            float topMargin = 1.2f * 27.35f;
            float bottomMargin = 10;   // ~15 pt
            float leftMargin = 19;      // ~5.7 pt
            float rightMargin = 12;     // ~14.2 pt
            document.setMargins(topMargin, rightMargin, bottomMargin, leftMargin);
            int columns = 5; // Five stickers per row
            int rows = 13; // 13 rows per page (Total 65 stickers per page)
            int totalTickets = columns * rows;
            // Create table
            Table table = new Table(UnitValue.createPercentArray(columns))
                    .useAllAvailableWidth()  // Ensure it fits A4 width
                    .setHorizontalAlignment(HorizontalAlignment.CENTER);
            int currentNumber = startNumber;
            for (int i = 0; i < totalTickets && currentNumber <= endNumber; i++) {
                String ticketCode = String.format("%03d", currentNumber) + suffix; // Add suffix at the END
                currentNumber++;
                // Create text below barcode
                Paragraph text = new Paragraph(ticketCode)
                        .setBold()
                        .setTextAlignment(TextAlignment.CENTER)
                        .setVerticalAlignment(VerticalAlignment.MIDDLE)
                        .setFontSize(26)
                        .setMarginRight(20)
                        .setMarginTop(-10);
                // Generate barcode image
                float barcodeWidth = 122;
                float barcodeHeight = 16;
                Image barcodeImage = generateBarcode(ticketCode);
                barcodeImage.setWidth(barcodeWidth);
                barcodeImage.setHeight(barcodeHeight);
                barcodeImage.setTextAlignment(TextAlignment.CENTER);
                barcodeImage.setMarginLeft(-20);
                // Adjust barcode size
                // Create cell with barcode and text
                Cell cell = new Cell()
                        .setMarginTop(30)
                        .setWidth(barcodeWidth)
                        .setMarginLeft(-6)
                        .setPaddingBottom(11)
                        .add(barcodeImage)
                        .add(text)
                        .setTextAlignment(TextAlignment.CENTER)
                        .setBorder(Border.NO_BORDER)
                        .setPadding(8);
                // Add the cell to the table
                table.addCell(cell);
            }
            // Add table to document
            document.add(table);
            document.close();
            // Convert PDF to byte array and return as HTTP response
            byte[] pdfBytes = byteArrayOutputStream.toByteArray();
            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_PDF)
                    .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=stickers.pdf")
                    .body(pdfBytes);

        } catch (Exception e) {
            return ResponseEntity.internalServerError().body(null);
        }
    }
    private static Image generateBarcode(String text) throws Exception {
        BitMatrix bitMatrix = new MultiFormatWriter().encode(text, BarcodeFormat.CODE_128, 150, 50);
        Path tempImagePath = java.nio.file.Files.createTempFile("barcode", ".png");
        MatrixToImageWriter.writeToPath(bitMatrix, "PNG", tempImagePath);
        ImageData imageData = ImageDataFactory.create(tempImagePath.toUri().toURL());
        return new Image(imageData);
    }
}
   






//////////////////////////////////////
part 
//////////////////////////// 
package org.example.print.All;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.borders.Border;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.UnitValue;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.ByteArrayOutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("/Personaliser")
public class Part {

    /**
     * Example requests:
     *
     * 1. GET /part/print?code=ABC&code=DEF&times=3
     *    -> "ABC" repeated 3 times and "DEF" repeated 3 times.
     *
     * 2. GET /part/print?code=ABC&times=2&code=DEF&times=3
     *    -> "ABC" repeated 2 times and "DEF" repeated 3 times.
     *
     * This endpoint generates a PDF with a single column of barcodes.
     */
    @GetMapping("/print")
    public ResponseEntity<byte[]> generateStickersPDF(
            @RequestParam(name = "code") List<String> codes,
            @RequestParam(name = "times") List<Integer> times
    ) {
        try {
            // If only one "times" is provided, apply it to every code.
            if (times.size() == 1 && codes.size() > 1) {
                int singleTime = times.get(0);
                List<Integer> newTimes = new ArrayList<>();
                for (int i = 0; i < codes.size(); i++) {
                    newTimes.add(singleTime);
                }
                times = newTimes;
            }
            // Ensure we have the same number of codes and times.
            if (codes.size() != times.size()) {
                return ResponseEntity.badRequest()
                        .body("Mismatch: you must provide the same number of 'code' and 'times' parameters."
                                .getBytes());
            }

            // Build a list of codes to print, repeating each code as specified.
            List<String> allCodes = new ArrayList<>();
            for (int i = 0; i < codes.size(); i++) {
                String c = codes.get(i).trim();
                int repeatCount = times.get(i);

                if (c.isEmpty() || repeatCount <= 0) {
                    return ResponseEntity.badRequest()
                            .body(("Invalid input: code='" + c + "', times=" + repeatCount).getBytes());
                }

                for (int j = 0; j < repeatCount; j++) {
                    allCodes.add(c);
                }
            }

            // Prepare an in-memory PDF.
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            PdfWriter writer = new PdfWriter(byteArrayOutputStream);
            PdfDocument pdfDoc = new PdfDocument(writer);
            Document document = new Document(pdfDoc);

            // Create a single-column table (100% width).
            Table table = new Table(UnitValue.createPercentArray(1))
                    .useAllAvailableWidth();

            // For each code, generate a barcode and add it to the table.
            for (String code : allCodes) {
                Image barcodeImage = generateBarcode(code);
                barcodeImage.setWidth(140); // adjust as needed
                barcodeImage.setHeight(17); // adjust as needed
                barcodeImage.setMarginTop(-20) ;
                barcodeImage.setMarginLeft (-20) ;

                Paragraph text = new Paragraph(code)
                        .setBold()
                        .setTextAlignment(TextAlignment.CENTER)
                        .setFontSize(25)
                        .setMarginTop(-8)
                        .setMarginLeft(-400);

                Cell cell = new Cell()
                        .add(barcodeImage)
                        .add(text)
                        .setTextAlignment(TextAlignment.CENTER)
                        .setBorder(Border.NO_BORDER)
                        .setPadding(15);

                table.addCell(cell);
            }

            document.add(table);
            document.close();

            byte[] pdfBytes = byteArrayOutputStream.toByteArray();
            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_PDF)
                    .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=part.pdf")
                    .body(pdfBytes);

        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                    .body(("Error generating PDF: " + e.getMessage()).getBytes());
        }
    }

    /**
     * Helper method to generate a CODE_128 barcode from text.
     */
    private Image generateBarcode(String text) throws Exception {
        BitMatrix bitMatrix = new MultiFormatWriter()
                .encode(text, BarcodeFormat.CODE_128, 150, 50);
        Path tempImagePath = Files.createTempFile("barcode", ".png");
        MatrixToImageWriter.writeToPath(bitMatrix, "PNG", tempImagePath);
        ImageData imageData = ImageDataFactory.create(tempImagePath.toUri().toURL());
        return new Image(imageData);
    }
}
  

